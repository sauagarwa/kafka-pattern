---
- include_tasks: pre_check.yaml

- name: Is secrets backend already enabled
  kubernetes.core.k8s_exec:
    namespace: "{{ vault_ns }}"
    pod: "{{ vault_pod }}"
    command: >
      bash -e -c "vault secrets list | grep -e '^{{ vault_base_path }}'"
  register: secrets_enabled
  failed_when: false

- name: Create secrets backend kv-v2
  kubernetes.core.k8s_exec:
    namespace: "{{ vault_ns }}"
    pod: "{{ vault_pod }}"
    command: vault secrets enable -path="{{ vault_base_path }}" kv-v2
  when: secrets_enabled.rc != 0

- name: Is kubernetes backend already enabled
  kubernetes.core.k8s_exec:
    namespace: "{{ vault_ns }}"
    pod: "{{ vault_pod }}"
    command: >
      bash -e -c "vault auth list | grep -e '^{{ vault_hub }}'"
  register: kubernetes_enabled
  failed_when: false

- name: Enable kubernetes backend on hub
  kubernetes.core.k8s_exec:
    namespace: "{{ vault_ns }}"
    pod: "{{ vault_pod }}"
    command: "vault auth enable -path={{ vault_hub }} kubernetes"
  when: kubernetes_enabled.rc != 0

- name: Fetch "{{ external_secrets_ns }}/{{ external_secrets_sa }} secret name"
  kubernetes.core.k8s_info:
    kind: ServiceAccount
    namespace: "{{ external_secrets_ns }}"
    name: "{{ external_secrets_sa }}"
    api_version: v1
  register: serviceaccount

# FIXME: we could bail out nicely if secrets is empty
- name: Get "{{ external_secret_sa }} secrets"
  ansible.builtin.set_fact:
    secrets: "{{ serviceaccount.resources[0].secrets }}"

- name: Filter secrets of "{{ external_secrets_ns }}/{{ external_secrets_sa }}"
  ansible.builtin.set_fact:
    secret: "{{ item.name }}"
  when: '"golang-external-secrets-token-" in item.name'
  loop: "{{ secrets }}"

- name: Get token of the secret
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: "{{ external_secrets_ns }}"
    name: "{{ secret }}"
    api_version: v1
  register: token_data

# FIXME: we could bail out nicely if token_data is empty
- name: Set sa_token fact
  ansible.builtin.set_fact:
    sa_token: "{{ token_data.resources[0].data.token | b64decode }}"

- name: Configure hub kubernetes backend
  kubernetes.core.k8s_exec:
    namespace: "{{ vault_ns }}"
    pod: "{{ vault_pod }}"
    command: bash -e -c "vault write auth/{{ vault_hub }}/config token_reviewer_jwt={{ sa_token }}
        kubernetes_host={{ vault_hub_kubernetes_host }}
        kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        issuer=https://kubernetes.default.svc"

- name: Configure policy template for hub
  kubernetes.core.k8s_exec:
    namespace: "{{ vault_ns }}"
    pod: "{{ vault_pod }}"
    command: >
      bash -e -c "echo \"path \\\"secret/data/{{ vault_hub }}/*\\\" {
        capabilities = {{ vault_hub_capabilities }} }\" > /tmp/policy-{{ vault_hub }}.hcl"

- name: Configure policy for hub
  kubernetes.core.k8s_exec:
    namespace: "{{ vault_ns }}"
    pod: "{{ vault_pod }}"
    command: "vault policy write {{ vault_hub }}-secret /tmp/policy-{{ vault_hub }}.hcl"

- name: Configure kubernetes role for hub
  kubernetes.core.k8s_exec:
    namespace: "{{ vault_ns }}"
    pod: "{{ vault_pod }}"
    command: >
      vault write auth/"{{ vault_hub }}"/role/"{{ vault_hub }}"-role
        bound_service_account_names="{{ external_secrets_sa }}"
        bound_service_account_namespaces="{{ external_secrets_ns }}"
        policies="default,{{ vault_hub }}-secret" ttl="{{ vault_hub_ttl }}"
